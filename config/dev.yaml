# number of days to look back
num_days: 7

trim_len: 10000

docs:
  - name: "Woo X"
    url: "https://docs.woox.io/#release-note"
    method: httpx
  - name: "Binance"
    url: "https://binance-docs.github.io/apidocs/spot/en/#change-log"
    method: httpx
  - name: "Binance Spot Trading"
    url: "https://developers.binance.com/docs/binance-spot-api-docs/CHANGELOG"
    method: httpx
  - name: "Binance Margin Trading"
    url: "https://developers.binance.com/docs/margin_trading/change-log"
    method: httpx
  - name: "Binance Derivatives Trading"
    url: "https://developers.binance.com/docs/derivatives/change-log"
    method: httpx
  - name: "Bitfinex"
    url: "https://docs.bitfinex.com/docs/changelog"
    method: httpx
  - name: "Kraken"
    url: "https://docs.kraken.com/api/docs/change-log"
    method: httpx
  - name: "Coinbase Exchange"
    url: "https://docs.cdp.coinbase.com/exchange/docs/changelog/"
    method: singlefile
  - name: "Coinbase Upcoming Changes"
    url: "https://docs.cdp.coinbase.com/exchange/docs/upcoming-changes"
    method: singlefile
  - name: "MAX Exchange"
    url: "https://docs.google.com/document/d/1iLwjhU-AHSLB4UnZh3cPbkYL-M3-R0jW0MEL6iWt410/edit?tab=t.0#heading=h.z31cougdyqo7"
    method: singlefile
  - name: "Bybit Exchange"
    url: "https://bybit-exchange.github.io/docs/changelog/v5"
    method: httpx
  - name: "Bitget Exchange"
    url: "https://www.bitget.com/api-doc/common/changelog"
    method: singlefile
  - name: "OKX Exchange"
    url: https://www.okx.com/docs-v5/log_en/#upcoming-changes
    method: httpx
  - name: "Huobi Exchange"
    url: "https://huobiapi.github.io/docs/spot/v1/en/#change-log"
    method: httpx
  - name: "HitBTC Exchange"
    url: "https://api.hitbtc.com/#changelog"
    method: httpx

prompt: |
  Generate a structured changelog for a project using the provided information only.

  Follow the steps below to ensure the Changelog contains well-organized information, using appropriate categories and detailed descriptions for each change. Use only the information provided directlyâ€”do not add, fabricate, or use any assumed details or placeholders not explicitly included in the given context.

  # Steps

  1. **Identify Change Groups**:
    - Divide the changes into groups by relevant dates. Each group should include changes that are logically connected and share a common release date.
    - Ensure that there are no more than 10 change groups, listed in descending order of priority by their dates.
    - Do not generate a change group if that date has no significant changes reported.

  2. **Classify Each Change**:
    - For each change, categorize it into an appropriate category:
      - Choose from "breaking changes", "new features", "deprecations", "bug fixes", "performance improvements", or "security updates".
    - Write a **detailed description** for each change using only the provided information, which precisely explains what was done and why it was necessary. Do not fabricate or infer any details.

  3. **Summarize Change Groups**:
    - Write a high-level summary of the changes in each group.
    - Identify key topics, important features, or major issues fixed in the group, and summarize the overall intent or benefit using the provided information only.
    - Include **keywords** summarizing the main elements of each change for easy reference.

  4. **Specify Upcoming Changes**:
    - If there are any upcoming changes planned in the provided context, include those details. If no information is provided, leave this field blank.
